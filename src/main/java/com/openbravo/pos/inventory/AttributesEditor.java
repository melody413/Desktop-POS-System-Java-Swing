//    Roxy Pos  - Touch Friendly Point Of Sale
//    Copyright Â© 2009-2020 uniCenta & previous Openbravo POS works
//    https://unicenta.com
//
//    This file is part of Roxy Pos
//
//    Roxy Pos is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//   Roxy Pos is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Roxy Pos.  If not, see <http://www.gnu.org/licenses/>.

package com.openbravo.pos.inventory;

import com.openbravo.basic.BasicException;
import com.openbravo.data.user.DirtyManager;
import com.openbravo.data.user.EditorRecord;
import com.openbravo.format.Formats;
import com.openbravo.pos.forms.AppLocal;
import java.awt.Component;
import java.util.UUID;
import javax.swing.JOptionPane;

/**
 *
 * @author  adrian
 */
public final class AttributesEditor extends javax.swing.JPanel implements EditorRecord {

    private Object id;
        
    /** Creates new form AttributesEditor
     * @param dirty */
    public AttributesEditor(DirtyManager dirty) {
        initComponents();
        
        m_jName.getDocument().addDocumentListener(dirty);
        m_jIsModifier.addActionListener(dirty);
        
        writeValueEOF();
    }

    /**
     *
     */
    @Override
    public void writeValueEOF() {
        id = null;
        m_jName.setText(null);
        m_jName.setEnabled(false);
    }

    /**
     *
     */
    @Override
    public void writeValueInsert() {
        id = UUID.randomUUID().toString();
        m_jName.setText(null);
        m_jName.setEnabled(true);
        m_jIsModifier.setSelected(false);
    }

    /**
     *
     * @param value
     */
    @Override
    public void writeValueDelete(Object value) {

        Object[] attr = (Object[]) value;
        id = attr[0];
        m_jName.setText(Formats.STRING.formatValue(attr[1]));
        m_jName.setEnabled(false);
        if(attr[2] !=null && Integer.valueOf(attr[2].toString()) == 1) {
            m_jIsModifier.setSelected(true);
        }else{
            m_jIsModifier.setSelected(false);
        }
    }    

    /**
     *
     * @param value
     */
    @Override
    public void writeValueEdit(Object value) {

        Object[] attr = (Object[]) value;
        id = attr[0];
        m_jName.setText(Formats.STRING.formatValue(attr[1]));
        m_jName.setEnabled(true);
        if(attr[2] !=null && Integer.valueOf(attr[2].toString()) == 1) {
            m_jIsModifier.setSelected(true);
        }else{
            m_jIsModifier.setSelected(false);
        }
    }

    /**
     *
     * @return
     * @throws BasicException
     */
    @Override
    public Object createValue() throws BasicException {
        
        Object[] attr = new Object[3];

        attr[0] = id;
        attr[1] = m_jName.getText();
        if(m_jIsModifier.isSelected()){
            attr[2] = 1;
        }else{
            attr[2] = 0;
        }
        if (m_jName.getText().contains("&")) {
            JOptionPane.showMessageDialog(null, 
                AppLocal.getIntString("message.ampersand"));
        }        

        return attr;
    }

    /**
     *
     * @return
     */
    @Override
    public Component getComponent() {
        return this;
    }
    
    /**
     *
     */
    @Override
    public void refresh() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        m_jName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        m_jIsModifier = new javax.swing.JCheckBox();

        setLayout(null);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Name");
        jLabel2.setPreferredSize(new java.awt.Dimension(110, 30));
        add(jLabel2);
        jLabel2.setBounds(10, 0, 70, 40);

        m_jName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        m_jName.setPreferredSize(new java.awt.Dimension(220, 30));
        add(m_jName);
        m_jName.setBounds(120, 0, 200, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Is Modifier");
        jLabel3.setPreferredSize(new java.awt.Dimension(110, 30));
        add(jLabel3);
        jLabel3.setBounds(10, 50, 100, 40);
        add(m_jIsModifier);
        m_jIsModifier.setBounds(120, 50, 30, 40);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JCheckBox m_jIsModifier;
    private javax.swing.JTextField m_jName;
    // End of variables declaration//GEN-END:variables

}
